neweralg <- function (t,beta, D0 = NULL){
	#Takes one sample from the stationary distribution of the process
	#First generates the dominating chain
	x0 <- ceiling(2/(1-(2/3)^(1/beta)))-1
	if(x0<2) x0 <- 2
	D <- replicate(t,0)
	if(is.null(D0)){
			G	<- rgeom(1,1/2)
			D0	<- x0 - 1 + G
			}
	D <- c(D,D0)
	U <- runif(t)
	for(i in 1:t){
			if(U[i]>(2/3)){
				D[t+1-i] <- D[t+2-i] + 1
				}
			else if(U[i]<=(2/3)){
				D[t+1-i] <- D[t+2-i] - (D[t+2-i]>(x0-1))
			}
		}
	#Imputes W variables based on the dominating chain
	W <- replicate(t,0)
	for(i in 1:t){
		if(D[i]<D[i+1]) W[i] <- runif(1,2/3,1)^(1/beta)
		else W[i] <- runif(1,0,2/3)^(1/beta)
		}
	#Draws V variables independently from the dominating chain
	V <- runif(t)^(1/beta)
	xmin	<- 0
	xmax	<- D[1]
	coup  <- 0
	#Runs forward t steps to see if xmin and xmax couple
	for(i in 1:t){
		if(W[i]<=((1+xmin)/(xmax+1))){
			xmin <- W[i]*(xmax+1)
			xmax <- xmin
			coup <- 1
			}
		else{
			xmin <- V[i]*(1+xmin)
			xmax <- W[i]*(1+xmax)
			}
		}
	if(coup==1) return(c(xmin,t))
	# If not coupled, the program goes back t more steps and repeats
	else{
		# Calls the algorithm recursively to get an answer
		cftp <- neweralg(t,beta,D[1])
		xmin <- cftp[1]
		xmax <- D[1]
		for(i in 1:t){
			if(W[i]<=((1+xmin)/(xmax+1))){
				xmin <- W[i]*(xmax+1)
				xmax <- xmin
				}
			else{
				xmin <- V[i]*(1+xmin)
				xmax <- W[i]*(1+xmax)
				}
			}
		t <- t + cftp[2]
		return(c(xmin,t))
		}
	}
